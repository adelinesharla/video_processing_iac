name: Deploy Video Processing Infrastructure

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  REGION_DEFAULT: "us-east-1"
  PROJECT_NAME: "video-processor"
  TERRAFORM_STATE_BUCKET: "terraform-state-video-processor"

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          for lambda in lambda/*/; do
            cd $lambda
            pip install -r requirements.txt
            pip install pytest pytest-cov pytest-mock
            cd ../..
          done

      - name: Run tests
        run: |
          chmod +x run_tests.sh
          ./run_tests.sh

  build:
    name: Build and Push Lambda Images
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.REGION_DEFAULT }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push Lambda images
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          for lambda in video_processor upload_handler notification_handler; do
            docker build -t $ECR_REGISTRY/${{ env.PROJECT_NAME }}:$lambda ./lambda/$lambda/
            docker push $ECR_REGISTRY/${{ env.PROJECT_NAME }}:$lambda
          done

  terraform:
    name: Deploy Infrastructure
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.REGION_DEFAULT }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Format
        run: terraform fmt -check
        working-directory: ./terraform

      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="bucket=${{ env.TERRAFORM_STATE_BUCKET }}" \
            -backend-config="key=terraform.tfstate" \
            -backend-config="region=${{ env.REGION_DEFAULT }}"
        working-directory: ./terraform

      - name: Terraform Validate
        run: terraform validate
        working-directory: ./terraform

      - name: Terraform Plan
        run: terraform plan -out=tfplan
        working-directory: ./terraform
        env:
          TF_VAR_project_name: ${{ env.PROJECT_NAME }}
          TF_VAR_environment: production
          TF_VAR_aws_region: ${{ env.REGION_DEFAULT }}

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main'
        run: terraform apply -auto-approve tfplan
        working-directory: ./terraform