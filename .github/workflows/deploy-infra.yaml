name: Deploy Infrastructure

on:
  push:
    branches:
      - main

env:
  REGION_DEFAULT: "us-east-1"
  PROJECT_NAME: "video-processor"
  TERRAFORM_STATE_BUCKET: "terraform-state-video-processor"
  LAMBDA_BUCKET: "lambda-artifacts-video-processor"

jobs:
  terraform:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.REGION_DEFAULT }}

      # Create Terraform state bucket if it doesn't exist
      - name: Create Terraform State Bucket
        run: |
          if ! aws s3api head-bucket --bucket ${{ env.TERRAFORM_STATE_BUCKET }} 2>/dev/null; then
            aws s3api create-bucket \
              --bucket ${{ env.TERRAFORM_STATE_BUCKET }} \
              --region ${{ env.REGION_DEFAULT }}
            
            # Enable versioning
            aws s3api put-bucket-versioning \
              --bucket ${{ env.TERRAFORM_STATE_BUCKET }} \
              --versioning-configuration Status=Enabled

            # Enable encryption
            aws s3api put-bucket-encryption \
              --bucket ${{ env.TERRAFORM_STATE_BUCKET }} \
              --server-side-encryption-configuration '{
                "Rules": [
                  {
                    "ApplyServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }'

            # Block public access
            aws s3api put-public-access-block \
              --bucket ${{ env.TERRAFORM_STATE_BUCKET }} \
              --public-access-block-configuration '{
                "BlockPublicAcls": true,
                "IgnorePublicAcls": true,
                "BlockPublicPolicy": true,
                "RestrictPublicBuckets": true
              }'

            echo "Terraform state bucket created and configured"
          else
            echo "Terraform state bucket already exists"
          fi

      # Create Lambda artifacts bucket if it doesn't exist
      - name: Create Lambda Artifacts Bucket
        run: |
          if ! aws s3api head-bucket --bucket ${{ env.LAMBDA_BUCKET }} 2>/dev/null; then
            aws s3api create-bucket \
              --bucket ${{ env.LAMBDA_BUCKET }} \
              --region ${{ env.REGION_DEFAULT }}
            
            # Enable versioning
            aws s3api put-bucket-versioning \
              --bucket ${{ env.LAMBDA_BUCKET }} \
              --versioning-configuration Status=Enabled

            # Enable encryption
            aws s3api put-bucket-encryption \
              --bucket ${{ env.LAMBDA_BUCKET }} \
              --server-side-encryption-configuration '{
                "Rules": [
                  {
                    "ApplyServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }'

            # Block public access
            aws s3api put-public-access-block \
              --bucket ${{ env.LAMBDA_BUCKET }} \
              --public-access-block-configuration '{
                "BlockPublicAcls": true,
                "IgnorePublicAcls": true,
                "BlockPublicPolicy": true,
                "RestrictPublicBuckets": true
              }'

            echo "Lambda artifacts bucket created and configured"
          else
            echo "Lambda artifacts bucket already exists"
          fi

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Format
        run: terraform fmt -check

      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="bucket=${{ env.TERRAFORM_STATE_BUCKET }}" \
            -backend-config="key=terraform.tfstate" \
            -backend-config="region=${{ env.REGION_DEFAULT }}"

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan
        run: terraform plan -out=tfplan
        env:
          TF_VAR_project_name: ${{ env.PROJECT_NAME }}
          TF_VAR_environment: production
          TF_VAR_aws_region: ${{ env.REGION_DEFAULT }}
          TF_VAR_lambda_bucket: ${{ env.LAMBDA_BUCKET }}

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main'
        run: terraform apply -auto-approve tfplan